apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'

compileJava.options.encoding = 'UTF-8'

String ltVersion="5.2"


repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.+'
//    implementation group: 'org.codehaus.groovy', name: 'groovy-cli-picocli', version: '3.0.+'
    implementation group: 'info.picocli', name: 'picocli', version: '4.6.+'

    implementation group:'ch.qos.logback', name:'logback-classic', version:'1.2.3'

    implementation 'org.languagetool:language-uk:' + ltVersion
    implementation 'org.languagetool:language-ru:' + ltVersion

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
}

sourceSets {
    main {
        resources {
            srcDir "src/main/groovy"
//            include "**/*.groovy"
            includes = ["**/tools/*.md", "*.groovy"]
        }
    }
}

processResources {
    doLast() {
        copy {
            from("src/main/groovy/") {
              include "org/nlp_uk/tools/TagText.groovy"
            }
//            into "${project.buildDir}/resources/main"
            into "${project.buildDir}/classes/java/main"
            includeEmptyDirs = false
        }
    }
}

compileGroovy {
    exclude '**/demo/**/*.groovy'
//    exclude '**/other/**/*.groovy'
}


eclipse {
  classpath {
    defaultOutputDir = file('build')
  }
}


test {
    useJUnitPlatform()
}

compileGroovy {
  groovyOptions.forkOptions.jvmArgs = [ '-Dgroovy.grape.enable=false' ]
}

test {
  jvmArgs '-Dgroovy.grape.enable=false'
}



// windows have non-unicode encoding set by default
String osName = System.getProperty("os.name").toLowerCase();
if ( osName.contains("windows")) {
    if( ! "UTF-8".equals(System.getProperty("file.encoding")) ) {
        println "On Windows to get unicode handled correctly you need to set environment variable before running expand:"
        println "\tbash:"
        println "\t\texport JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8"
        println "\tcmd:"
        println "\t\t(change Font to 'Lucida Console' in cmd window properties)"
        println "\t\tchcp 65001"
        println "\t\tset JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8"
        println "\n\tNOTE: bash shell (e.g. git bash) is recommended: only in bash the output will handle all cyrillics and expandInteractive only supported in bash"

        // poor man's safety net (may work but still will not show all cyrillic characters)
        tasks.each { task ->
            if( task instanceof JavaExec ) {
                task.jvmArgs '-Dfile.encoding=UTF-8'
            }
        }
    }
}
